(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{508:function(t,s,e){"use strict";e.r(s);var a=e(16),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"c-s-架构-b-s架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-s-架构-b-s架构"}},[t._v("#")]),t._v(" C/S 架构 B/S架构")]),t._v(" "),e("blockquote",[e("p",[t._v("C/S和B/S是两种软件的架构方式")])]),t._v(" "),e("h3",{attrs:{id:"c-s-client-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-s-client-server"}},[t._v("#")]),t._v(" C/S (Client/Server)")]),t._v(" "),e("ul",[e("li",[t._v("特点: 必须在客户端安装特定软件")]),t._v(" "),e("li",[t._v("优点: 图像显示效果好")]),t._v(" "),e("li",[t._v("服务器: 服务器的软件和功能升级,客户端必须已经更新,不利于维护")])]),t._v(" "),e("h3",{attrs:{id:"b-s-browser-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-s-browser-server"}},[t._v("#")]),t._v(" B/S (Browser/Server)")]),t._v(" "),e("ul",[e("li",[t._v("特点: 无需客户端,浏览器即可")]),t._v(" "),e("li",[t._v("优点: 涉及升级功能只需更新服务端")]),t._v(" "),e("li",[t._v("缺点: 图像显示效果不如C/S")]),t._v(" "),e("li",[t._v("需要通过HTTP协议访问")])]),t._v(" "),e("h2",{attrs:{id:"servlet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet"}},[t._v("#")]),t._v(" Servlet")]),t._v(" "),e("blockquote",[e("p",[t._v("Servlet:Applet，服务端的程序(代码,功能实现)。交互式的处理客户端发"),e("code",[t._v("送到服务器请求")]),t._v(",完成响应操作")]),t._v(" "),e("p",[t._v("Servlet 是一个 Java Web开发标准，狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。")])]),t._v(" "),e("h3",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("blockquote",[e("p",[t._v("动态Web")]),t._v(" "),e("p",[t._v("JavaWeb的基础，JavaEE的一个组成部分")])]),t._v(" "),e("h3",{attrs:{id:"作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),e("blockquote",[e("p",[t._v("接收客户端，完成操作。")]),t._v(" "),e("p",[t._v("动态生成Web")]),t._v(" "),e("p",[t._v("将包含操作结果的动态Web响应给客户端")])]),t._v(" "),e("h2",{attrs:{id:"servlet生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet生命周期"}},[t._v("#")]),t._v(" Servlet生命周期")]),t._v(" "),e("p",[t._v("Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：")]),t._v(" "),e("ul",[e("li",[t._v("Servlet 通过调用 init () 方法进行初始化。")]),t._v(" "),e("li",[t._v("Servlet 调用 service() 方法来处理客户端的请求。")]),t._v(" "),e("li",[t._v("Servlet 通过调用 destroy() 方法终止（结束）。")]),t._v(" "),e("li",[t._v("Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。")])]),t._v(" "),e("h3",{attrs:{id:"init"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#init"}},[t._v("#")]),t._v(" init()")]),t._v(" "),e("p",[t._v("init() 方法被设计成只调用一次。它在"),e("code",[t._v("第一次")]),t._v("创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化")]),t._v(" "),e("p",[t._v("Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但也可以指定 Servlet 在服务器第一次启动时被加载")]),t._v(" "),e("p",[t._v("当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，")]),t._v(" "),e("p",[t._v("适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。")]),t._v(" "),e("p",[t._v("init 方法的定义如下：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化代码...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h3",{attrs:{id:"service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[t._v("#")]),t._v(" service()")]),t._v(" "),e("p",[t._v("service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。")]),t._v(" "),e("p",[t._v("每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。")]),t._v(" "),e("p",[t._v("下面是该方法的特征：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以不用对 service() 方法做任何动作，只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。")]),t._v(" "),e("p",[t._v("doGet() 和 doPost() 方法是每次服务请求中最常用的方法。")]),t._v(" "),e("h4",{attrs:{id:"doget-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doget-方法"}},[t._v("#")]),t._v(" doGet()方法")]),t._v(" "),e("p",[t._v("GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("doGet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Servlet 代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);