(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{508:function(s,t,a){"use strict";a.r(t);var e=a(16),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"c-s-架构-b-s架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-s-架构-b-s架构"}},[s._v("#")]),s._v(" C/S 架构 B/S架构")]),s._v(" "),a("blockquote",[a("p",[s._v("C/S和B/S是两种软件的架构方式")])]),s._v(" "),a("h3",{attrs:{id:"c-s-client-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-s-client-server"}},[s._v("#")]),s._v(" C/S (Client/Server)")]),s._v(" "),a("ul",[a("li",[s._v("特点: 必须在客户端安装特定软件")]),s._v(" "),a("li",[s._v("优点: 图像显示效果好")]),s._v(" "),a("li",[s._v("服务器: 服务器的软件和功能升级,客户端必须已经更新,不利于维护")])]),s._v(" "),a("h3",{attrs:{id:"b-s-browser-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-s-browser-server"}},[s._v("#")]),s._v(" B/S (Browser/Server)")]),s._v(" "),a("ul",[a("li",[s._v("特点: 无需客户端,浏览器即可")]),s._v(" "),a("li",[s._v("优点: 涉及升级功能只需更新服务端")]),s._v(" "),a("li",[s._v("缺点: 图像显示效果不如C/S")]),s._v(" "),a("li",[s._v("需要通过HTTP协议访问")])]),s._v(" "),a("h2",{attrs:{id:"servlet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#servlet"}},[s._v("#")]),s._v(" Servlet")]),s._v(" "),a("blockquote",[a("p",[s._v("Servlet:Applet，服务端的程序(代码,功能实现)。交互式的处理客户端发"),a("code",[s._v("送到服务器请求")]),s._v(",完成响应操作")]),s._v(" "),a("p",[s._v("Servlet 是一个 Java Web开发标准，狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。")])]),s._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("blockquote",[a("p",[s._v("动态Web")]),s._v(" "),a("p",[s._v("JavaWeb的基础，JavaEE的一个组成部分")])]),s._v(" "),a("h3",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),a("blockquote",[a("p",[s._v("接收客户端，完成操作。")]),s._v(" "),a("p",[s._v("动态生成Web")]),s._v(" "),a("p",[s._v("将包含操作结果的动态Web响应给客户端")])]),s._v(" "),a("h2",{attrs:{id:"核心接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心接口"}},[s._v("#")]),s._v(" 核心接口")]),s._v(" "),a("h3",{attrs:{id:"servlet接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#servlet接口"}},[s._v("#")]),s._v(" Servlet接口")]),s._v(" "),a("p",[s._v("在Servlet API中最重要的是Servlet接口，所有Servlet都会直接或者间接的与这个接口发生联系，或是直接实现该接口，或间接继承自实现了该类的接口，该接口包括了以下5个方法：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletConfig")]),s._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletConfig")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServletConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" var2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServletInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ol",[a("li",[s._v("第一次访问Servlet时，服务器创建Servlet对象，调用init()，再调用service()")]),s._v(" "),a("li",[s._v("第二次访问时，Servlet对象已经存在，不再创建，执行service()")]),s._v(" "),a("li",[s._v("当服务器停止，会释放Servlet，调用destory()")])]),s._v(" "),a("h3",{attrs:{id:"genericservlet抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#genericservlet抽象类"}},[s._v("#")]),s._v(" GenericServlet抽象类")]),s._v(" "),a("p",[s._v("GenericServlet使编写Servlet变得更容易。它提供生命周期方法init和destory的简单实现")]),s._v(" "),a("p",[s._v("在这个类中，它简单实现除过service()的其余四个方法，简化了开发步骤")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServlet")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericServlet")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" service "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" servletRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" servletResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"httpservlet类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httpservlet类"}},[s._v("#")]),s._v(" HttpServlet类")]),s._v(" "),a("p",[s._v("它继承了GenericServlet，HttpServlet的子类至少得重写1个方法，通常是以下之一")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doGet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doPost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doPut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doDelete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"servlet生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#servlet生命周期"}},[s._v("#")]),s._v(" Servlet生命周期")]),s._v(" "),a("p",[s._v("Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：")]),s._v(" "),a("ul",[a("li",[s._v("Servlet 通过调用 init () 方法进行初始化。")]),s._v(" "),a("li",[s._v("Servlet 调用 service() 方法来处理客户端的请求。")]),s._v(" "),a("li",[s._v("Servlet 通过调用 destroy() 方法终止（结束）。")]),s._v(" "),a("li",[s._v("Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。")])]),s._v(" "),a("h3",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init"}},[s._v("#")]),s._v(" init()")]),s._v(" "),a("p",[s._v("init() 方法被设计成只调用一次。它在"),a("code",[s._v("第一次")]),s._v("创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化")]),s._v(" "),a("p",[s._v("Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但也可以指定 Servlet 在服务器第一次启动时被加载")]),s._v(" "),a("p",[s._v("当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，")]),s._v(" "),a("p",[s._v("适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。")]),s._v(" "),a("p",[s._v("init 方法的定义如下：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化代码...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[s._v("#")]),s._v(" service()")]),s._v(" "),a("p",[s._v("service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。")]),s._v(" "),a("p",[s._v("每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。")]),s._v(" "),a("p",[s._v("下面是该方法的特征：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以不用对 service() 方法做任何动作，只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。")]),s._v(" "),a("p",[s._v("doGet() 和 doPost() 方法是每次服务请求中最常用的方法。")]),s._v(" "),a("h3",{attrs:{id:"doget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doget"}},[s._v("#")]),s._v(" doGet()")]),s._v(" "),a("p",[s._v("GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doGet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Servlet 代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"dopost"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dopost"}},[s._v("#")]),s._v(" doPost()")]),s._v(" "),a("p",[s._v("POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doPost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Servlet 代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"destroy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#destroy"}},[s._v("#")]),s._v(" destroy()")]),s._v(" "),a("p",[s._v("destroy() 方法只会被调用"),a("code",[s._v("一次")]),s._v("，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。")]),s._v(" "),a("blockquote",[a("p",[s._v("在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 终止化代码...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"get-post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-post"}},[s._v("#")]),s._v(" Get & Post")]),s._v(" "),a("h3",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[s._v("#")]),s._v(" Get")]),s._v(" "),a("ul",[a("li",[s._v("get提交的数据会在URL之后，以?分割和传输数据，参数之间以&相连")]),s._v(" "),a("li",[s._v("get方式明文传递，数据量小，由于是明文，所以不安全")]),s._v(" "),a("li",[s._v("效率高，因为数据量小且以字符串拼接传输，浏览器默认传输是get请求")]),s._v(" "),a("li",[s._v("对应的Servlet的方法是doGet")])]),s._v(" "),a("h3",{attrs:{id:"post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[s._v("#")]),s._v(" Post")]),s._v(" "),a("ul",[a("li",[s._v("post方法是把提交的数据放在HTTP包中的Body中")]),s._v(" "),a("li",[s._v("密文传递数据，数据量大，安全")]),s._v(" "),a("li",[s._v("效率没get高")]),s._v(" "),a("li",[s._v("对应的Servlet的方法是doPost")])]),s._v(" "),a("h2",{attrs:{id:"转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转发"}},[s._v("#")]),s._v(" 转发")]),s._v(" "),a("blockquote",[a("p",[s._v("转发的作用在服务器端，将请求发送给服务器上的其它资源，以共同完成一次请求的处理")])]),s._v(" "),a("h3",{attrs:{id:"页面跳转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面跳转"}},[s._v("#")]),s._v(" 页面跳转")]),s._v(" "),a("blockquote",[a("p",[s._v("在调用业务逻辑的servlet中，编写以下代码")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRequestDispatcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/目标URL-pattern"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forward")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("resp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("使用forward跳转时，是在服务器内部跳转，地址栏不发生变化，属于同一次请求。")]),s._v(" "),a("h3",{attrs:{id:"数据传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据传递"}},[s._v("#")]),s._v(" 数据传递")]),s._v(" "),a("p",[s._v("forward表示一次请求，是在服务器内部跳转，可以共享同一次request作用域中的数据。")]),s._v(" "),a("ul",[a("li",[s._v("request作用域：拥有存储数据的空间，作用范围是一次请求有效（一次请求可以经过多次转发）")])]),s._v(" "),a("ol",[a("li",[s._v("可以将数据存入request后，在一次请求过程中的任何位置进行获取")]),s._v(" "),a("li",[s._v("可以传递任何数据（基本数据类型，对象，数组，集合等）")])]),s._v(" "),a("ul",[a("li",[s._v("存数据：request.setAttribute(key,value);")])]),s._v(" "),a("ol",[a("li",[s._v("以键值对形式存储在request作用域中，key为String类型，value为Object类型")])]),s._v(" "),a("ul",[a("li",[s._v("取数据：request.getAttribute(key);")])]),s._v(" "),a("ol",[a("li",[s._v("通过String类型的key访问Object类型的value")])]),s._v(" "),a("h3",{attrs:{id:"转发特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转发特点"}},[s._v("#")]),s._v(" 转发特点")]),s._v(" "),a("ul",[a("li",[s._v("转发是服务器行为")]),s._v(" "),a("li",[s._v("转发是浏览器只做了一次访问请求")]),s._v(" "),a("li",[s._v("转发浏览器地址不变")]),s._v(" "),a("li",[s._v("转发两次跳转之间传输的信息不会丢失，所以可以通过request进行数据的传递")]),s._v(" "),a("li",[s._v("转发只能将请求转发给同一个web应用中的组件")])]),s._v(" "),a("h2",{attrs:{id:"重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[s._v("#")]),s._v(" 重定向")]),s._v(" "),a("blockquote",[a("p",[s._v("重定向作用在客户端，客户端将请求发送给服务端后，服务器响应给客户端一个新的请求地址，客户端重新发送新请求。")])]),s._v(" "),a("h3",{attrs:{id:"页面跳转-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面跳转-2"}},[s._v("#")]),s._v(" 页面跳转")]),s._v(" "),a("blockquote",[a("p",[s._v("在调用业务逻辑的servlet中，编写以下代码")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendRedirect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"目标URL"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("URL:统一资源标识符（Uniform Resource Identifier）,用来表示服务器中定位一个资源，资源在web项目中的路径。")]),s._v(" "),a("h3",{attrs:{id:"数据传递-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据传递-2"}},[s._v("#")]),s._v(" 数据传递")]),s._v(" "),a("p",[s._v("sendRedirect跳转时，地址栏改变，代表客户端重新发送的请求，属于两次请求。")]),s._v(" "),a("ul",[a("li",[s._v("response没有作用域，两次request请求中的数据无法共享")]),s._v(" "),a("li",[s._v('传递数据：通过URL的拼接进行数据传递（"/webProject/b?username="tom"）;')]),s._v(" "),a("li",[s._v('获取数据：request.getParameter("username");')])]),s._v(" "),a("h3",{attrs:{id:"重定向特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向特点"}},[s._v("#")]),s._v(" 重定向特点")]),s._v(" "),a("ul",[a("li",[s._v("重定向是客户端行为")]),s._v(" "),a("li",[s._v("重定向是浏览器做了至少两次的访问请求")]),s._v(" "),a("li",[s._v("重定向浏览器地址改变")]),s._v(" "),a("li",[s._v("重定向两次跳转之间传输的信息会丢失（request范围）")]),s._v(" "),a("li",[s._v("重定向可以指向任何的资源，包括当前应用程序中的其他资源，同一个站点上的其他应用程序中的资源，其他站点的资源。")])]),s._v(" "),a("h3",{attrs:{id:"转发-重定向总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转发-重定向总结"}},[s._v("#")]),s._v(" 转发，重定向总结")]),s._v(" "),a("blockquote",[a("p",[s._v("当两个Servlet需要传递数据时，选择forward转发，不建议使用sendRedirect进行传递")])]),s._v(" "),a("h2",{attrs:{id:"状态管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态管理"}},[s._v("#")]),s._v(" 状态管理")]),s._v(" "),a("blockquote",[a("p",[s._v("HTTP协议是无状态的，不能保存每次提交的信息")]),s._v(" "),a("p",[s._v("如果用户发来一个新的请求，服务器无法知道它是否与上次的请求有联系")])]),s._v(" "),a("h3",{attrs:{id:"概念-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("p",[s._v("将浏览器与Web服务器之间多次交互当作一个整体处理，并且将多次交互所涉及的数据保存下来")]),s._v(" "),a("h3",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[s._v("#")]),s._v(" 分类")]),s._v(" "),a("ul",[a("li",[s._v("客户端状态管理技术：将状态保存在客户端，代表性：Cookie技术")]),s._v(" "),a("li",[s._v("服务器状态管理技术：将状态保存在服务端。代表性：Session技术（服务器传递Session时需要Cookie的方式）和application")])]),s._v(" "),a("h2",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" Cookie")]),s._v(" "),a("ul",[a("li",[s._v("Cookie是在浏览器访问Web服务器的某个资源时，由Web服务器在HTTP响应头中附带传递给浏览器的一小段数据")]),s._v(" "),a("li",[s._v("一旦Web浏览器保存了某个Cookie，那么它以后每次访问该Web服务器时，都应在HTTP请求头中将这个Cookie回传给Web服务器")]),s._v(" "),a("li",[s._v("一个Cookie主要是由标识该信息的名称(name)和值(value)组成")])]),s._v(" "),a("h3",{attrs:{id:"创建cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建cookie"}},[s._v("#")]),s._v(" 创建Cookie")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建Cookie")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),s._v(" cookie "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"code"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/webs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置Cookie路径")]),s._v("\ncookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMaxAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//内存存储，取值有三种，>0有效期，单位秒，=0浏览器关闭；<0内存存储，默认-1")]),s._v("\nresp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addCookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//添加到response对象中，响应时发送给客户端")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//注意: 有效路径: 当前访问资源的上一级目录，不带主机名")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);